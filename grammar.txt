Program         → StmtList

StmtList        → Statement NEWLINE StmtList
                | ε

Statement       → AssignmentStmt
                | InputStmt
                | PrintStmt
                | IfStmt

AssignmentStmt  → IDENTIFIER '=' Expression

InputStmt       → IDENTIFIER '=' 'input' '(' STRING ')'

PrintStmt       → 'print' '(' Expression ')'

IfStmt          → 'if' Condition ':' NEWLINE INDENT StmtList DEDENT ElsePart

ElsePart        → ElifList ElseClause
                | ElifList
                | ElseClause
                | ε

ElifList        → 'elif' Condition ':' NEWLINE INDENT StmtList DEDENT ElifList
                | ε

ElseClause      → 'else' ':' NEWLINE INDENT StmtList DEDENT

Condition       → Expression (RelOp Expression)* 
                | Expression

RelOp           → '<' | '>' | '==' | '!=' | '<=' | '>='

Expression      → Expression '+' Term
                | Expression '-' Term
                | Term
                | ( "int" | "float" | "str" | "bool" | "list" ) "(" Expression ")" 

Term            → Term '*' Postfix
                | Term '/' Postfix
                | Postfix

Postfix         → Primary ( '[' Expression ']' )*
                // The optional index access allows constructs like: lst, lst[0], lst[0][1], etc.

Primary         → CONSTANT
                | IDENTIFIER
                | '(' Expression ')'
                | ListLiteral

ListLiteral     → '[' ListElements ']'

ListElements    → Expression (',' Expression)* 
                | ε